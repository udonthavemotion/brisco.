---
// BRISC Admin - Leads Management Page
// Server-side rendered page for viewing captured leads
import '../../../src/styles/global.css';

// This page requires server-side rendering to use service role key
export const prerender = false;

let leads: any[] = [];
let error: string | null = null;
let totalCount = 0;

// Only fetch leads if we have proper credentials
const supabaseUrl = import.meta.env.SUPABASE_URL;
const supabaseServiceKey = import.meta.env.SUPABASE_SERVICE_ROLE_KEY;

if (supabaseUrl && supabaseServiceKey) {
  try {
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // Fetch leads with pagination (latest first)
    const { data, error: fetchError, count } = await supabase
      .from('leads')
      .select('*', { count: 'exact' })
      .order('created_at', { ascending: false })
      .limit(100); // Show latest 100 leads
    
    if (fetchError) {
      error = `Failed to fetch leads: ${fetchError.message}`;
    } else {
      leads = data || [];
      totalCount = count || 0;
    }
  } catch (err) {
    error = `Database connection error: ${err.message}`;
  }
} else {
  error = 'Supabase credentials not configured. Please set SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY environment variables.';
}

// Format date helper
function formatDate(dateString) {
  return new Date(dateString).toLocaleString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    timeZoneName: 'short'
  });
}
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>BRISC Admin - Leads Management</title>
  <meta name="robots" content="noindex, nofollow">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: linear-gradient(135deg, #000000 0%, #111111 100%);
      color: #ffffff;
      min-height: 100vh;
      padding: 2rem;
    }
    
    .admin-container {
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .admin-header {
      text-align: center;
      margin-bottom: 3rem;
      padding-bottom: 2rem;
      border-bottom: 1px solid #333;
    }
    
    .admin-title {
      font-size: 2.5rem;
      font-weight: 300;
      letter-spacing: 4px;
      margin-bottom: 1rem;
      color: #ffffff;
    }
    
    .admin-subtitle {
      color: #888;
      font-size: 1rem;
      font-weight: 300;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }
    
    .stat-card {
      background: linear-gradient(135deg, #1a1a1a 0%, #0a0a0a 100%);
      border: 1px solid #333;
      padding: 1.5rem;
      border-radius: 4px;
      text-align: center;
    }
    
    .stat-number {
      font-size: 2rem;
      font-weight: 600;
      color: #ffffff;
      margin-bottom: 0.5rem;
    }
    
    .stat-label {
      color: #888;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    
    .error-message {
      background: linear-gradient(135deg, #2a1a1a 0%, #1a0a0a 100%);
      border: 1px solid #ff4444;
      padding: 1.5rem;
      border-radius: 4px;
      color: #ff6666;
      margin-bottom: 2rem;
      text-align: center;
    }
    
    .leads-table {
      background: linear-gradient(135deg, #1a1a1a 0%, #0a0a0a 100%);
      border: 1px solid #333;
      border-radius: 4px;
      overflow: hidden;
    }
    
    .table-header {
      background: #000;
      padding: 1rem;
      border-bottom: 1px solid #333;
    }
    
    .table-title {
      font-size: 1.2rem;
      font-weight: 500;
      color: #ffffff;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
    }
    
    th, td {
      padding: 1rem;
      text-align: left;
      border-bottom: 1px solid #333;
    }
    
    th {
      background: #111;
      color: #888;
      font-weight: 500;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    
    td {
      color: #ccc;
    }
    
    .email-cell {
      font-family: 'Monaco', 'Menlo', monospace;
      color: #ffffff;
      font-weight: 500;
    }
    
    .source-badge {
      background: #333;
      color: #fff;
      padding: 0.25rem 0.5rem;
      border-radius: 2px;
      font-size: 0.8rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .date-cell {
      font-size: 0.9rem;
      color: #888;
    }
    
    .no-leads {
      text-align: center;
      padding: 3rem;
      color: #666;
    }
    
    .refresh-btn {
      background: linear-gradient(135deg, #ffffff 0%, #f0f0f0 100%);
      color: #000;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 2px;
      font-weight: 600;
      font-size: 0.9rem;
      letter-spacing: 1px;
      text-transform: uppercase;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 1rem;
    }
    
    .refresh-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 15px rgba(255,255,255,0.2);
    }
    
    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }
      
      .admin-title {
        font-size: 2rem;
        letter-spacing: 2px;
      }
      
      table {
        font-size: 0.9rem;
      }
      
      th, td {
        padding: 0.75rem 0.5rem;
      }
    }
  </style>
</head>

<body>
  <div class="admin-container">
    <header class="admin-header">
      <h1 class="admin-title">BRISC ADMIN</h1>
      <p class="admin-subtitle">Leads Management Dashboard</p>
    </header>

    {error ? (
      <div class="error-message">
        <strong>Configuration Error:</strong><br>
        {error}
      </div>
    ) : (
      <>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-number">{totalCount}</div>
            <div class="stat-label">Total Leads</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{leads.filter((lead: any) => {
              const today = new Date();
              const leadDate = new Date(lead.created_at);
              return leadDate.toDateString() === today.toDateString();
            }).length}</div>
            <div class="stat-label">Today</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{leads.filter((lead: any) => {
              const weekAgo = new Date();
              weekAgo.setDate(weekAgo.getDate() - 7);
              return new Date(lead.created_at) >= weekAgo;
            }).length}</div>
            <div class="stat-label">This Week</div>
          </div>
        </div>

        <div class="leads-table">
          <div class="table-header">
            <h2 class="table-title">Recent Leads (Latest 100)</h2>
          </div>
          
          {leads.length === 0 ? (
            <div class="no-leads">
              <p>No leads captured yet.</p>
              <p style="margin-top: 1rem; color: #555; font-size: 0.9rem;">
                Leads will appear here when users request access on the homepage.
              </p>
            </div>
          ) : (
            <table>
              <thead>
                <tr>
                  <th>Email</th>
                  <th>Source</th>
                  <th>Name</th>
                  <th>IP Address</th>
                  <th>Date Added</th>
                </tr>
              </thead>
              <tbody>
                {leads.map((lead: any) => (
                  <tr>
                    <td class="email-cell">{lead.email}</td>
                    <td>
                      <span class="source-badge">{lead.source || 'unknown'}</span>
                    </td>
                    <td>{lead.name || '—'}</td>
                    <td>{lead.ip || '—'}</td>
                    <td class="date-cell">{formatDate(lead.created_at)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>

        <div style="text-align: center;">
          <button class="refresh-btn" onclick="window.location.reload()">
            Refresh Data
          </button>
        </div>
      </>
    )}
  </div>

  <script>
    // Auto-refresh every 30 seconds
    setInterval(() => {
      window.location.reload();
    }, 30000);
    
    console.log('[BRISC Admin] Leads dashboard loaded');
  </script>
</body>
</html>
