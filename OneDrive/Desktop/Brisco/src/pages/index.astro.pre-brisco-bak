---
import ProductCard from '../components/ProductCard.astro';
import Hero from '../components/Hero.astro';
import '../styles/global.css';

// Hardcoded product data
const products = [
  {
    id: 1,
    name: 'Splatter Brisco Tee (White)',
    price: 80,
    frontImg: '/images/fatlil.2_1755650727_3702989146314406154_305151088.jpg',
    backImg: '/images/fatlil.2_1755650727_3702989146314371580_305151088.jpg',
    desc: 'Oversized with colorful splatter and torch graphic.'
  },
  {
    id: 2,
    name: 'Be Your Own Light Tee (Black)',
    price: 90,
    frontImg: '/images/fatlil.2_1755650727_3702989146557587913_305151088.jpg',
    backImg: '/images/fatlil.2_1755650727_3702989146440085811_305151088.jpg',
    desc: 'Edgy back print for empowerment.'
  }
];



const siteTitle = 'Brisco. - Be Your Own Light | Gothic Luxury Streetwear';
const siteDescription = 'High-fashion streetwear by Khalil Brisco. Gothic luxury meets urban edge. Be the risk, be your own light.';
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{siteTitle}</title>
  <meta name="description" content="Brisco Streetwear: Be Your Own Light limited drops. Gothic luxury streetwear meets urban rebellion.">
  
  <!-- SEO Meta Tags -->
  <meta name="keywords" content="streetwear, fashion, gothic, luxury, Khalil Brisco, Brisco, urban wear, limited edition, torch, flame, be your own light, edgy minimalism">
  <meta name="author" content="Khalil Brisco">
  <meta name="robots" content="index, follow">
  <link rel="canonical" href="https://brisco-streetwear.netlify.app">
  
  <!-- Open Graph / Social Media -->
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://brisco-streetwear.netlify.app">
  <meta property="og:title" content={siteTitle}>
  <meta property="og:description" content={siteDescription}>
  <meta property="og:image" content="/images/hero-1.jpg">
  <meta property="og:site_name" content="Brisco Streetwear">
  
  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:url" content="https://brisco-streetwear.netlify.app">
  <meta name="twitter:title" content={siteTitle}>
  <meta name="twitter:description" content={siteDescription}>
  <meta name="twitter:image" content="/images/hero-1.jpg">
  <meta name="twitter:creator" content="@khalilbrisco8">
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="icon" type="image/png" href="/favicon.png">
  
  <!-- PWA Manifest -->
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#f5f5f5">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="apple-mobile-web-app-title" content="Brisco">
  
  <!-- Preload Critical Resources -->
  <link rel="preload" href="/logo.png" as="image">
  <link rel="preload" href="/images/fatlil.2_1755650727_3702989146314406154_305151088.jpg" as="image">
  <link rel="preload" href="https://fonts.googleapis.com/css2?family=Helvetica+Neue:wght@300;400;500;700&display=swap" as="style">
  
  <!-- Schema.org JSON-LD -->
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": "Brisco Streetwear",
      "url": "https://brisco-streetwear.netlify.app",
      "logo": "https://brisco-streetwear.netlify.app/images/logo.png",
      "sameAs": [
        "https://instagram.com/khalilbrisco8"
      ],
      "founder": {
        "@type": "Person",
        "name": "Khalil Brisco"
      },
      "description": "High-fashion streetwear brand combining gothic luxury with urban edge"
    }
  </script>
</head>

<body>
  <!-- Password Protected Teaser Gate -->
  <div id="teaser-gate" class="teaser-gate">
    <div class="teaser-container">
      <div class="teaser-content">
        <img src="/logo.png" alt="Brisco logo" class="logo" aria-label="Brisco logo">
        <p class="teaser-subtitle">Sign up for exclusive access to drops</p>
        <p class="teaser-scarcity">Limited drops August 2025</p>
        
        <!-- Email Signup Form -->
        <div class="teaser-email-section">
          <div class="email-signup-teaser">
            <input 
              type="email" 
              placeholder="Enter your email" 
              class="teaser-email-input"
              id="teaser-email"
              aria-label="Email address for exclusive access"
            />
            <button class="btn-teaser btn-email" id="teaser-email-btn">
              Get Access
            </button>
          </div>
          <p class="teaser-email-note">
            <!-- GHL Integration: Connect GoHighLevel for email capture -->
            Join the waitlist for early access to exclusive drops
          </p>
        </div>
        
        <!-- Password Entry -->
        <div class="teaser-password-section">
          <div class="password-divider">
            <span>or</span>
          </div>
          <div class="password-input-group">
            <input 
              type="password" 
              placeholder="Enter using password" 
              class="teaser-password-input"
              id="teaser-password"
              aria-label="Password for immediate access"
            />
            <button class="btn-teaser btn-password" id="teaser-password-btn">
              Enter
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Store Content (Hidden by default) -->
  <div id="store-content" class="store-content" style="display: none;">
    <!-- Torch Cart Icon -->
    <button class="cart-icon torch-cart" aria-label="View shopping cart">
      <svg class="torch-icon" viewBox="0 0 24 32" fill="currentColor">
        <path d="M12 2 Q10 4 11 8 Q9 12 10.5 16 Q9 20 12 28 Q15 20 13.5 16 Q15 12 13 8 Q14 4 12 2 Z" />
        <circle cx="12" cy="30" r="1.5" />
      </svg>
      <span class="cart-count">0</span>
    </button>

    <!-- Cart Flyout Drawer -->
    <div class="cart-drawer" id="cart-drawer">
      <div class="cart-drawer-content">
        <div class="cart-header">
          <h3>Your Cart</h3>
          <button class="cart-close" aria-label="Close cart">&times;</button>
        </div>
        <div class="cart-items" id="cart-items">
          <!-- Cart items will be populated by JavaScript -->
        </div>
        <div class="cart-footer">
          <div class="cart-total">
            <span>Total: $<span id="cart-total">0.00</span></span>
          </div>
          <button class="btn btn-primary cart-checkout" id="cart-checkout">
            <!-- GHL Integration: Sync cart with GoHighLevel funnels for minimal checkout -->
            Checkout
          </button>
        </div>
      </div>
    </div>

    <!-- Cart Overlay -->
    <div class="cart-overlay" id="cart-overlay"></div>

    <!-- Enhanced Hero Section -->
    <Hero />

  <!-- Products Section -->
  <section class="products" id="products">
    <div class="container">
      <h2 style="text-align: center; font-size: 2.5rem; margin-bottom: 2rem; font-weight: 300;">
        Limited Collection
      </h2>
      
      <div class="product-grid">
        {products.map((product) => (
          <ProductCard {...product} />
        ))}
      </div>
    </div>
  </section>

  <!-- About Section -->
  <section class="about" id="about">
    <div class="container">
      <div class="about-content">
        <h2>The Vision</h2>
        <p>
          Brisco: High-fashion streetwear by Khalil Brisco. 
          Born from the intersection of gothic luxury and urban rebellion, 
          each piece embodies the philosophy of being your own light in the darkness. 
          Be the risk, be your own light.
        </p>
        <p style="margin-top: 1.5rem; font-style: italic;">
          "In a world of followers, dare to illuminate your own path."
        </p>
      </div>
    </div>
  </section>

  <!-- Footer -->
  <footer class="footer" id="contact">
    <div class="container">
      <div class="footer-content">
        <div class="footer-section">
          <h3>Stay Connected</h3>
          <p>Join the movement. Be the first to know about new drops.</p>
          
          <!-- Mailchimp Email Signup Placeholder -->
          <div class="email-signup">
            <!-- 
            GHL Email Integration: Replace with GoHighLevel email capture form
            Use GHL API to add subscribers to email campaigns
            Connect to GHL automation workflows for abandoned cart, welcome series, etc.
            -->
            <input 
              type="email" 
              placeholder="Enter your email" 
              class="email-input"
              id="email-signup"
              aria-label="Email address for newsletter signup"
            />
            <button class="btn btn-primary" id="signup-btn">
              Subscribe
            </button>
          </div>
        </div>
        
        <div class="footer-section">
          <h3>Follow the Light</h3>
          <div class="social-links">
            <a href="https://instagram.com/khalilbrisco8" class="social-link" target="_blank" rel="noopener noreferrer">
              @khalilbrisco8
            </a>
          </div>
          
          <div style="margin-top: 2rem; color: var(--text-gray); font-size: 0.9rem;">
            <p>&copy; 2024 Brisco Streetwear. All rights reserved.</p>
            <p style="margin-top: 0.5rem;">
              Designed for rebels. Built for legends.
            </p>
          </div>
        </div>
      </div>
    </div>
  </footer>
  </div> <!-- End store-content -->

  <!-- Scripts -->
  <script src="/src/scripts/cart.js"></script>
  
  <!-- Analytics Placeholders -->
  <script>
    // GHL or GA4: Track add-to-cart events
    // Example: gtag('config', 'GA_MEASUREMENT_ID');
    
    // GoHighLevel Analytics Integration
    // Example: ghl('init', 'GHL_ACCOUNT_ID');
    
    // Performance and conversion tracking
    if (typeof (window as any).briscoCart !== 'undefined') {
      // Track page views, user interactions, conversion events
      (window as any).briscoCart.trackEvent('page_view', {
        page_title: document.title,
        page_location: window.location.href
      });
    }
  </script>
  
  <!-- Password Gate Script -->
  <script>
    // Password gate functionality
    document.addEventListener('DOMContentLoaded', () => {
      const GATE_PASSWORD = 'light2025';
      
      const teaserGate = document.getElementById('teaser-gate');
      const storeContent = document.getElementById('store-content');
      const passwordInput = document.getElementById('teaser-password') as HTMLInputElement;
      const passwordBtn = document.getElementById('teaser-password-btn');
      const emailInput = document.getElementById('teaser-email') as HTMLInputElement;
      const emailBtn = document.getElementById('teaser-email-btn');
      
      // Password validation
      const validatePassword = () => {
        if (!passwordInput) return;
        const enteredPassword = passwordInput.value.trim();
        
        if (enteredPassword === GATE_PASSWORD) {
          alert('Access Granted');
          // Hide teaser gate with fade out
          if (teaserGate) {
            teaserGate.style.opacity = '0';
            teaserGate.style.transition = 'opacity 0.5s ease';
            setTimeout(() => {
              teaserGate.style.display = 'none';
            }, 500);
          }
          
          // Show store content with fade in animation
          if (storeContent) {
            storeContent.style.display = 'block';
            storeContent.style.opacity = '0';
            setTimeout(() => {
              storeContent.style.opacity = '1';
              storeContent.style.transition = 'opacity 0.8s ease';
            }, 100);
          }
          
          // Store access in sessionStorage to remember during session
          sessionStorage.setItem('brisco_access_granted', 'true');
        } else if (enteredPassword) {
          alert('Incorrect password. Try again.');
          passwordInput.value = '';
        } else {
          alert('Please enter a password.');
        }
      };
      
      // Email signup handler
      const handleEmailSignup = () => {
        if (!emailInput) return;
        const email = emailInput.value.trim();
        
        if (!email) {
          alert('Please enter your email address');
          return;
        }
        
        if (!isValidEmail(email)) {
          alert('Please enter a valid email address');
          return;
        }
        
        // GHL Integration: Connect GoHighLevel for email capture
        // Example: await fetch('/api/ghl/waitlist', { method: 'POST', body: { email } })
        
        alert('Thank you! You\'ve been added to the exclusive access list. Check your email for updates.');
        emailInput.value = '';
      };
      
      // Event listeners
      if (passwordBtn) {
        passwordBtn.addEventListener('click', validatePassword);
      }
      
      if (passwordInput) {
        passwordInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            validatePassword();
          }
        });
      }
      
      if (emailBtn) {
        emailBtn.addEventListener('click', handleEmailSignup);
      }
      
      if (emailInput) {
        emailInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            handleEmailSignup();
          }
        });
      }
      
      // Check if access was already granted in this session
      if (sessionStorage.getItem('brisco_access_granted') === 'true') {
        if (teaserGate) teaserGate.style.display = 'none';
        if (storeContent) {
          storeContent.style.display = 'block';
          storeContent.style.opacity = '1';
        }
      }
    });
    
    // Email validation helper (reused from existing code)
    function isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }
  </script>
  
  <script>
    // Enhanced centerpiece functionality is now handled by the Hero component
    document.addEventListener('DOMContentLoaded', () => {
      // Email signup (placeholder)
      const signupBtn = document.getElementById('signup-btn');
      const emailInput = document.getElementById('email-signup') as HTMLInputElement;
      
      if (signupBtn && emailInput) {
        signupBtn.addEventListener('click', () => {
          const email = emailInput.value.trim();
        
        if (!email) {
          alert('Please enter your email address');
          return;
        }
        
        if (!isValidEmail(email)) {
          alert('Please enter a valid email address');
          return;
        }
        
        // GHL API Integration: Send email to GoHighLevel
        // Example: await fetch('/api/ghl/subscribe', { method: 'POST', body: { email } })
        
          // Placeholder success
          alert('Thanks for subscribing! You\'ll be the first to know about new drops.');
          emailInput.value = '';
          
          // Analytics tracking
          if ((window as any).briscoCart) {
            (window as any).briscoCart.trackEvent('newsletter_signup', { email });
          }
        });
        
        // Enter key support for email signup
        emailInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            signupBtn.click();
          }
        });
      }
      
      // Smooth scrolling for anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
      
      // Scarcity Timer Functionality
      const initScarcityTimers = () => {
        const timers = document.querySelectorAll('.scarcity-timer');
        timers.forEach(timer => {
          const productId = timer.getAttribute('data-product-id');
          const countElement = timer.querySelector('.timer-count');
          
          if (countElement) {
            // Simulate decreasing stock count
            let initialStock = 100;
            const minStock = 5;
            const decreaseInterval = 30000; // 30 seconds
            
            // Get saved stock or initialize
            const savedStock = localStorage.getItem(`stock_${productId}`);
            let currentStock = savedStock ? parseInt(savedStock) : initialStock;
            
            const updateStock = () => {
              if (currentStock > minStock) {
                currentStock -= Math.floor(Math.random() * 3) + 1; // Decrease by 1-3
                if (currentStock < minStock) currentStock = minStock;
                
                countElement.textContent = `${currentStock} units left`;
                localStorage.setItem(`stock_${productId}`, currentStock.toString());
                
                // Add urgency styling when stock is low
                if (currentStock <= 20) {
                  (timer as HTMLElement).style.background = 'rgba(255, 0, 0, 0.9)';
                  (timer as HTMLElement).style.animation = 'urgentPulse 1s ease-in-out infinite';
                }
              }
            };
            
            // Initial update
            countElement.textContent = `${currentStock} units left`;
            
            // Set interval for stock updates
            setInterval(updateStock, decreaseInterval);
          }
        });
      };
      
      // Initialize scarcity timers
      initScarcityTimers();
      
      // Intersection Observer for animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('fade-in-up');
          }
        });
      }, observerOptions);
      
      // Observe elements for animation
      document.querySelectorAll('.product-card, .about-content, .footer-section').forEach(el => {
        observer.observe(el);
      });
    });
    
    // Email validation helper
    function isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }
    
    // Performance monitoring
    window.addEventListener('load', () => {
      if ('performance' in window) {
        const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
        console.log(`Page loaded in ${loadTime}ms`);
        
        // Track page load performance
        if ((window as any).briscoCart) {
          (window as any).briscoCart.trackEvent('page_load_time', { 
            load_time: loadTime,
            page: 'home'
          });
        }
      }
    });
  </script>
</body>
</html>
