var m=(i,t)=>()=>(t||i((t={exports:{}}).exports,t),t.exports);var h=m((y,o)=>{document.addEventListener("DOMContentLoaded",()=>{const i=document.getElementById("signup-btn"),t=document.getElementById("email-signup");i&&t&&(i.addEventListener("click",()=>{const e=t.value.trim();if(!e){alert("Please enter your email address");return}if(!u(e)){alert("Please enter a valid email address");return}alert("Thanks for subscribing! You'll be the first to know about new drops."),t.value=""}),t.addEventListener("keypress",e=>{e.key==="Enter"&&i.click()}))});function u(i){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(i)}console.log("[Brisco] Minimal gate loaded");class d{constructor(){this.items=this.loadCart(),this.init()}init(){this.updateCartUI(),this.bindEvents(),document.addEventListener("addToCart",t=>{this.addItem(t.detail)})}loadCart(){try{const t=localStorage.getItem("brisco-cart");return t?JSON.parse(t):[]}catch(t){return console.error("Error loading cart:",t),[]}}saveCart(){try{localStorage.setItem("brisco-cart",JSON.stringify(this.items))}catch(t){console.error("Error saving cart:",t),this.showToast("Error saving cart","error")}}addItem(t){const e=this.items.find(a=>a.id===t.id);e?e.quantity+=1:this.items.push({...t,quantity:1,addedAt:Date.now()}),this.saveCart(),this.updateCartUI(),this.showToast(`${t.name} added to cart!`),this.triggerIgniteAnimation(t),this.trackEvent("add_to_cart",{item_id:t.id,item_name:t.name,price:t.price,quantity:1})}triggerIgniteAnimation(t){const e=document.querySelector(`[data-product-id="${t.id}"]`);e&&(e.classList.add("ignite"),setTimeout(()=>{e.classList.remove("ignite")},600))}removeItem(t){const e=this.items.findIndex(a=>a.id===t);if(e>-1){const a=this.items[e];this.items.splice(e,1),this.saveCart(),this.updateCartUI(),this.showToast(`${a.name} removed from cart`),this.trackEvent("remove_from_cart",{item_id:a.id,item_name:a.name})}}updateQuantity(t,e){const a=this.items.find(s=>s.id===t);a&&(e<=0?this.removeItem(t):(a.quantity=e,this.saveCart(),this.updateCartUI()))}getTotal(){return this.items.reduce((t,e)=>t+e.price*e.quantity,0)}getItemCount(){return this.items.reduce((t,e)=>t+e.quantity,0)}updateCartUI(){this.updateCartIcon(),this.updateCartModal()}updateCartIcon(){const t=document.querySelector(".cart-icon"),e=document.querySelector(".cart-count");if(t&&e){const a=this.getItemCount();e.textContent=a,a>0?(e.classList.add("show"),t.classList.add("has-items")):(e.classList.remove("show"),t.classList.remove("has-items"))}}updateCartModal(){this.updateCartDrawer()}updateCartDrawer(){const t=document.getElementById("cart-items"),e=document.getElementById("cart-total");if(!(!t||!e)){if(e.textContent=this.getTotal().toFixed(2),t.innerHTML="",this.items.length===0){t.innerHTML=`
        <div class="cart-empty">
          <div class="cart-empty-icon">ðŸ”¥</div>
          <p>Your cart is empty</p>
          <p style="font-size: 0.8rem; margin-top: 0.5rem;">Add some fire to your collection</p>
        </div>
      `;return}this.items.forEach(a=>{const s=document.createElement("div");s.className="cart-item",s.innerHTML=`
        <img src="${a.frontImg}" alt="" class="cart-item-image" />
        <div class="cart-item-info">
          <div class="cart-item-name">${a.name}</div>
          <div class="cart-item-price">$${a.price}</div>
        </div>
        <div class="cart-item-controls">
          <button class="quantity-btn" data-action="decrease" data-id="${a.id}">-</button>
          <span class="quantity-display">${a.quantity}</span>
          <button class="quantity-btn" data-action="increase" data-id="${a.id}">+</button>
        </div>
      `,t.appendChild(s)}),t.querySelectorAll(".quantity-btn").forEach(a=>{a.addEventListener("click",s=>{const r=s.target.getAttribute("data-action"),n=parseInt(s.target.getAttribute("data-id")),c=this.items.find(l=>l.id===n);c&&(r==="increase"?this.updateQuantity(n,c.quantity+1):r==="decrease"&&this.updateQuantity(n,c.quantity-1))})})}}bindEvents(){const t=document.querySelector(".cart-icon");t&&t.addEventListener("click",()=>{this.toggleCartDrawer()});const e=document.querySelector(".cart-close");e&&e.addEventListener("click",()=>{this.closeCartDrawer()});const a=document.getElementById("cart-overlay");a&&a.addEventListener("click",()=>{this.closeCartDrawer()});const s=document.getElementById("cart-checkout");s&&s.addEventListener("click",()=>{this.openCheckout()}),document.addEventListener("keydown",r=>{r.key==="Escape"&&this.closeCartDrawer()})}openCheckout(){if(this.items.length===0){this.showToast("Your cart is empty","info");return}this.showCartSummary()}showCartSummary(){const t=this.items.map(s=>`${s.name} (${s.quantity}x) - $${(s.price*s.quantity).toFixed(2)}`).join(`
`),e=this.getTotal().toFixed(2),a=`Cart Summary:

${t}

Total: $${e}

Checkout integration coming soon!`;alert(a),this.trackEvent("begin_checkout",{value:this.getTotal(),currency:"USD",items:this.items})}toggleCartDrawer(){const t=document.getElementById("cart-drawer"),e=document.getElementById("cart-overlay");t&&e&&(t.classList.contains("open")?this.closeCartDrawer():this.openCartDrawer())}openCartDrawer(){const t=document.getElementById("cart-drawer"),e=document.getElementById("cart-overlay");t&&e&&(t.classList.add("open"),e.classList.add("show"),document.body.style.overflow="hidden",this.updateCartDrawer())}closeCartDrawer(){const t=document.getElementById("cart-drawer"),e=document.getElementById("cart-overlay");t&&e&&(t.classList.remove("open"),e.classList.remove("show"),document.body.style.overflow="")}clearCart(){this.items=[],this.saveCart(),this.updateCartUI(),this.showToast("Cart cleared"),this.trackEvent("clear_cart")}showToast(t,e="success"){document.querySelectorAll(".toast").forEach(r=>r.remove());const s=document.createElement("div");s.className=`toast ${e}`,s.textContent=t,document.body.appendChild(s),setTimeout(()=>s.classList.add("show"),100),setTimeout(()=>{s.classList.remove("show"),setTimeout(()=>s.remove(),300)},3e3)}trackEvent(t,e={}){console.log("Analytics Event:",t,e)}exportCart(){return{items:this.items,total:this.getTotal(),itemCount:this.getItemCount(),exportedAt:new Date().toISOString()}}importCart(t){t&&Array.isArray(t.items)&&(this.items=t.items,this.saveCart(),this.updateCartUI(),this.showToast("Cart imported successfully"))}addToWishlist(t){console.log("Add to wishlist:",t)}}document.addEventListener("DOMContentLoaded",()=>{window.briscoCart=new d});typeof o<"u"&&o.exports&&(o.exports=d);document.addEventListener("DOMContentLoaded",()=>{document.querySelectorAll(".add-to-cart").forEach(t=>{t.addEventListener("click",e=>{const a=t.getAttribute("data-product");if(!a)return;const s=JSON.parse(a),r=new CustomEvent("addToCart",{detail:s});document.dispatchEvent(r);const n=t.textContent;t.textContent="Added!",t.classList.add("loading"),setTimeout(()=>{t.textContent=n,t.classList.remove("loading")},1e3)})})});console.log("[Brisco] Minimal hero loaded")});export default h();
